% =========================================================================
% REHAZENTER CLINICAL GAIT ANALYSIS TOOLBOX
% =========================================================================
% File name:    exportCondition_lowerLimb
% -------------------------------------------------------------------------
% Subject:      Export .mat file for each condition with only intra cycle
%               data of each outcome
% -------------------------------------------------------------------------
% Author: F. Moissenet, C. Schreiber
% Date of creation: 16/05/2018
% Version: 1
% =========================================================================

function Output = exportCondition_lowerLimb(Output,Segment,Joint,Marker,Vmarker,EMG,Event,Spatiotemporal,fMarker)

% =========================================================================
% Initialisation
% =========================================================================
Event.RHS = fix(Event.RHS*fMarker);
Event.RTO = fix(Event.RTO*fMarker);
Event.LHS = fix(Event.LHS*fMarker);
Event.LTO = fix(Event.LTO*fMarker);
R_n = Event.RHS(2)-Event.RHS(1)+1;
R_k = (1:R_n)';
R_ko = (linspace(1,R_n,101))';
Output.Spatiotemporal = [];
Output.RJointkinematics = [];
Output.RSegmentkinematics = [];
Output.RDynamics = [];
Output.REMG = [];
Output.REvents = [];
Output.LJointkinematics = [];
Output.LSegmentkinematics = [];
Output.LDynamics = [];
Output.LEMG = [];
Output.LEvents = [];

% =========================================================================
% Spatiotemporal
% =========================================================================
nSpatiotemporal = fieldnames(Spatiotemporal);
for i = 1:size(nSpatiotemporal,1)
    Output.Spatiotemporal.(nSpatiotemporal{i}) = Spatiotemporal.(nSpatiotemporal{i});
end

% =========================================================================
% Right joint kinematics
% =========================================================================
nJoint = fieldnames(Joint);
for i = 1:4
    for j = 1:size(nJoint,1)
        if size(Joint(i).(nJoint{j}),3) > 1
            temp = permute(Joint(i).(nJoint{j})(:,:,Event.RHS(1):Event.RHS(2)),[3,1,2]);
            if sum(isnan(temp)) ~= size(isnan(temp),1)
                Output.Rstride.Joint(i).(nJoint{j}) = permute(interp1(R_k,temp,R_ko,'spline'),[2,3,1]);
            else
                Output.Rstride.Joint(i).(nJoint{j}) = NaN(1,1,101);
            end
        else
            Output.Rstride.Joint(i).(nJoint{j}) = Joint(i).(nJoint{j});
        end
    end
end
Output.Rstride.Jkinematics.Ankle.Angle_FE = Output.Rstride.Joint(2).FE;
Output.Rstride.Jkinematics.Ankle.Angle_AA = Output.Rstride.Joint(2).AA;
Output.Rstride.Jkinematics.Ankle.Angle_IER = Output.Rstride.Joint(2).IER;
Output.Rstride.Jkinematics.Knee.Angle_FE = Output.Rstride.Joint(3).FE;
Output.Rstride.Jkinematics.Knee.Angle_AA = Output.Rstride.Joint(3).AA;
Output.Rstride.Jkinematics.Knee.Angle_IER = Output.Rstride.Joint(3).IER;
Output.Rstride.Jkinematics.Hip.Angle_FE = Output.Rstride.Joint(4).FE;
Output.Rstride.Jkinematics.Hip.Angle_AA = Output.Rstride.Joint(4).AA;
Output.Rstride.Jkinematics.Hip.Angle_IER = Output.Rstride.Joint(4).IER;

% =========================================================================
% Right segment kinematics
% =========================================================================
nSegment = fieldnames(Segment);
for i = 1:5
    for j = 1:size(nSegment,1)
        if size(Segment(i).(nSegment{j}),3) > 1
            temp = permute(Segment(i).(nSegment{j})(:,:,Event.RHS(1):Event.RHS(2)),[3,1,2]);
            if sum(isnan(temp)) ~= size(isnan(temp),1)
                Output.Rstride.Segment(i).(nSegment{j}) = permute(interp1(R_k,temp,R_ko,'spline'),[2,3,1]);
            else
                Output.Rstride.Segment(i).(nSegment{j}) = NaN(1,1,101);
            end
        else
            Output.Rstride.Segment(i).(nSegment{j}) = Segment(i).(nSegment{j});
        end
    end
end
Output.Rstride.Skinematics.Foot.Angle_FE = interp1(R_k,permute(Segment(2).FE(1,1,Event.RHS(1):Event.RHS(2)),[3,1,2]),R_ko,'spline');
Output.Rstride.Skinematics.Foot.Angle_AA = interp1(R_k,permute(Segment(2).AA(1,1,Event.RHS(1):Event.RHS(2)),[3,1,2]),R_ko,'spline');
Output.Rstride.Skinematics.Foot.Angle_IER = interp1(R_k,permute(Segment(2).IER(1,1,Event.RHS(1):Event.RHS(2)),[3,1,2]),R_ko,'spline');
Output.Rstride.Skinematics.Shank.Angle_FE = interp1(R_k,permute(Segment(3).FE(1,1,Event.RHS(1):Event.RHS(2)),[3,1,2]),R_ko,'spline');
Output.Rstride.Skinematics.Shank.Angle_AA = interp1(R_k,permute(Segment(3).AA(1,1,Event.RHS(1):Event.RHS(2)),[3,1,2]),R_ko,'spline');
Output.Rstride.Skinematics.Shank.Angle_IER = interp1(R_k,permute(Segment(3).IER(1,1,Event.RHS(1):Event.RHS(2)),[3,1,2]),R_ko,'spline');
Output.Rstride.Skinematics.Thigh.Angle_FE = interp1(R_k,permute(Segment(4).FE(1,1,Event.RHS(1):Event.RHS(2)),[3,1,2]),R_ko,'spline');
Output.Rstride.Skinematics.Thigh.Angle_AA = interp1(R_k,permute(Segment(4).AA(1,1,Event.RHS(1):Event.RHS(2)),[3,1,2]),R_ko,'spline');
Output.Rstride.Skinematics.Thigh.Angle_IER = Output.Rstride.Segment(4).IER;
Output.Rstride.Skinematics.Pelvis.Angle_FE = Output.Rstride.Segment(5).FE;
Output.Rstride.Skinematics.Pelvis.Angle_AA = Output.Rstride.Segment(5).AA;
Output.Rstride.Skinematics.Pelvis.Angle_IER = Output.Rstride.Segment(5).IER;

% =========================================================================
% Right dynamics
% =========================================================================
Output.Rstride.Dynamics.Ankle.Moment_FE = Output.Rstride.Joint(2).Mj(1,:,:);
Output.Rstride.Dynamics.Ankle.Moment_AA = Output.Rstride.Joint(2).Mj(3,:,:);
Output.Rstride.Dynamics.Ankle.Moment_IER = Output.Rstride.Joint(2).Mj(2,:,:);
Output.Rstride.Dynamics.Knee.Moment_FE = Output.Rstride.Joint(3).Mj(1,:,:);
Output.Rstride.Dynamics.Knee.Moment_AA = Output.Rstride.Joint(3).Mj(2,:,:);
Output.Rstride.Dynamics.Knee.Moment_IER = Output.Rstride.Joint(3).Mj(3,:,:);
Output.Rstride.Dynamics.Hip.Moment_FE = Output.Rstride.Joint(4).Mj(1,:,:);
Output.Rstride.Dynamics.Hip.Moment_AA = Output.Rstride.Joint(4).Mj(2,:,:);
Output.Rstride.Dynamics.Hip.Moment_IER = Output.Rstride.Joint(4).Mj(3,:,:);

% -------------------------------------------------------------------------
% EMG
% -------------------------------------------------------------------------
nEMG = fieldnames(EMG);
for i = 1:size(nEMG,1)
    temp = permute(EMG.(nEMG{i}).signal(:,:,Event.RHS(1):Event.RHS(2)),[3,1,2]);
    if sum(isnan(temp)) ~= size(isnan(temp),1)
        Output.Rstride.EMG.(nEMG{i}).signal = permute(interp1(R_k,temp,R_ko,'spline'),[2,3,1]);
    else
        Output.Rstride.EMG.(nEMG{i}).signal = NaN(1,1,101);
    end
    temp = permute(EMG.(nEMG{i}).envelop(:,:,Event.RHS(1):Event.RHS(2)),[3,1,2]);
    if sum(isnan(temp)) ~= size(isnan(temp),1)
        Output.Rstride.EMG.(nEMG{i}).envelop = permute(interp1(R_k,temp,R_ko,'spline'),[2,3,1]);
    else
        Output.Rstride.EMG.(nEMG{i}).envelop = NaN(1,1,101);
    end
end

% -------------------------------------------------------------------------
% Event
% -------------------------------------------------------------------------
Output.Rstride.Event.RHS = (Event.RHS-Event.RHS(1)+1)*100/(Event.RHS(2)-Event.RHS(1)+1);
Output.Rstride.Event.RTO = (Event.RTO-Event.RHS(1)+1)*100/(Event.RHS(2)-Event.RHS(1)+1);
Output.Rstride.Event.LHS = (Event.LHS-Event.RHS(1)+1)*100/(Event.RHS(2)-Event.RHS(1)+1);
Output.Rstride.Event.LTO = (Event.LTO-Event.RHS(1)+1)*100/(Event.RHS(2)-Event.RHS(1)+1);

% =========================================================================
% LEFT STRIDE
% =========================================================================
L_n = Event.LHS(2)-Event.LHS(1)+1;
L_k = (1:L_n)';
L_ko = (linspace(1,L_n,101))';

% -------------------------------------------------------------------------
% Marker
% -------------------------------------------------------------------------
nMarker = fieldnames(Marker);
for i = 1:size(nMarker,1)
    temp = permute(Marker.(nMarker{i})(:,:,Event.LHS(1):Event.LHS(2)),[3,1,2]);
    Output.Lstride.Marker.(nMarker{i}) = permute(interp1(L_k,temp,L_ko,'spline'),[2,3,1]);
end

% -------------------------------------------------------------------------
% Vmarker
% -------------------------------------------------------------------------
nVmarker = fieldnames(Vmarker);
for i = 1:size(nVmarker,1)
    temp = permute(Vmarker.(nVmarker{i})(:,:,Event.LHS(1):Event.LHS(2)),[3,1,2]);
    Output.Lstride.Vmarker.(nVmarker{i}) = permute(interp1(L_k,temp,L_ko,'spline'),[2,3,1]);
end

% -------------------------------------------------------------------------
% EMG
% -------------------------------------------------------------------------
nEMG = fieldnames(EMG);
for i = 1:size(nEMG,1)
    temp = permute(EMG.(nEMG{i}).signal(:,:,Event.LHS(1):Event.LHS(2)),[3,1,2]);
    if sum(isnan(temp)) ~= size(isnan(temp),1)
        Output.Lstride.EMG.(nEMG{i}).signal = permute(interp1(L_k,temp,L_ko,'spline'),[2,3,1]);
    else
        Output.Lstride.EMG.(nEMG{i}).signal = NaN(1,1,101);
    end
    temp = permute(EMG.(nEMG{i}).envelop(:,:,Event.LHS(1):Event.LHS(2)),[3,1,2]);
    if sum(isnan(temp)) ~= size(isnan(temp),1)
        Output.Lstride.EMG.(nEMG{i}).envelop = permute(interp1(L_k,temp,L_ko,'spline'),[2,3,1]);
    else
        Output.Lstride.EMG.(nEMG{i}).envelop = NaN(1,1,101);
    end
end

% -------------------------------------------------------------------------
% Segment
% -------------------------------------------------------------------------
nSegment = fieldnames(Segment);
for i = 101:105
    for j = 1:size(nSegment,1)
        if size(Segment(i).(nSegment{j}),3) > 1
            temp = permute(Segment(i).(nSegment{j})(:,:,Event.LHS(1):Event.LHS(2)),[3,1,2]);
            if sum(isnan(temp)) ~= size(isnan(temp),1)
                Output.Lstride.Segment(i).(nSegment{j}) = permute(interp1(L_k,temp,L_ko,'spline'),[2,3,1]);
            else
                Output.Lstride.Segment(i).(nSegment{j}) = NaN(1,1,101);
            end
        else
            Output.Lstride.Segment(i).(nSegment{j}) = Segment(i).(nSegment{j});
        end
    end
end

% -------------------------------------------------------------------------
% Segment kinematics
% -------------------------------------------------------------------------
for i = 2:5
    Output.Lstride.Skinematics(i).FE = Output.Lstride.Segment(i).FE;
    Output.Lstride.Skinematics(i).AA = Output.Lstride.Segment(i).AA;
    Output.Lstride.Skinematics(i).IER = Output.Lstride.Segment(i).IER;
end

% -------------------------------------------------------------------------
% Joint
% -------------------------------------------------------------------------
nJoint = fieldnames(Joint);
for i = 101:104
    for j = 1:size(nJoint,1)
        if size(Joint(i).(nJoint{j}),3) > 1
            temp = permute(Joint(i).(nJoint{j})(:,:,Event.LHS(1):Event.LHS(2)),[3,1,2]);
            if sum(isnan(temp)) ~= size(isnan(temp),1)
                Output.Lstride.Joint(i).(nJoint{j}) = permute(interp1(L_k,temp,L_ko,'spline'),[2,3,1]);
            else
                Output.Lstride.Joint(i).(nJoint{j}) = NaN(1,1,101);
            end
        else
            Output.Lstride.Joint(i).(nJoint{j}) = Joint(i).(nJoint{j});
        end
    end
end

% -------------------------------------------------------------------------
% Joint kinematics
% -------------------------------------------------------------------------
for i = 2:4
    Output.Lstride.Jkinematics(i).FE = Output.Lstride.Joint(i).FE;
    Output.Lstride.Jkinematics(i).AA = Output.Lstride.Joint(i).AA;
    Output.Lstride.Jkinematics(i).IER = Output.Lstride.Joint(i).IER;
end

% -------------------------------------------------------------------------
% Event
% -------------------------------------------------------------------------
Output.Lstride.Event.RHS = (Event.RHS-Event.LHS(1)+1)*100/(Event.LHS(2)-Event.LHS(1)+1);
Output.Lstride.Event.RTO = (Event.RTO-Event.LHS(1)+1)*100/(Event.LHS(2)-Event.LHS(1)+1);
Output.Lstride.Event.LHS = (Event.LHS-Event.LHS(1)+1)*100/(Event.LHS(2)-Event.LHS(1)+1);
Output.Lstride.Event.LTO = (Event.LTO-Event.LHS(1)+1)*100/(Event.LHS(2)-Event.LHS(1)+1);